plugins {
    id "groovy"
    id "com.google.cloud.tools.jib" version "2.4.0"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"
}

version "0.1"
group "lidar.converter.server"

repositories {
    maven { url "https://repo.osgeo.org/repository/release" }
    maven { url "https://repo.osgeo.org/repository/snapshot" }
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {

//    compile "commons-beanutils:commons-beanutils:1.9.2"

    compile ( "org.geoscript:geoscript-groovy:1.14.0") {
        exclude module: "commons-beanutils"
        exclude module: "groovy-all"
        exclude module: "gt-arcgrid"
        exclude module: "gt-brewer"
//        exclude module: "gt-charts"
        exclude module: "gt-css"
        exclude module: "gt-geobuf"
        exclude module: "gt-geojson"
        exclude module: "gt-geopkg"
        exclude module: "gt-geotiff"
        exclude module: "gt-grassraster"
        exclude module: "gt-grid"
        exclude module: "gt-gtopo30"
        exclude module: "gt-image"
        exclude module: "gt-imageio-ext-gdal"
        exclude module: "gt-imagemosaic"
        exclude module: "gt-imagepyramid"
        exclude module: "gt-jdbc-h2"
        exclude module: "gt-jdbc-mysql"
        exclude module: "gt-jdbc-postgis"
        exclude module: "gt-mbtiles"
        exclude module: "gt-netcdf"
        exclude module: "gt-ogr-jni"
        exclude module: "gt-process"
        exclude module: "gt-process-feature"
        exclude module: "gt-process-geometry"
        exclude module: "gt-process-raster"
        exclude module: "gt-property"
        exclude module: "gt-render"
        exclude module: "gt-shapefile"
        exclude module: "gt-svg"
        exclude module: "gt-swing"
        exclude module: "gt-wms"
        exclude module: "gt-wfs-ng"
        exclude module: "gt-xsd-kml"
        exclude module: "gt-xsd-wfs"
        exclude module: "gt-ysld"
        exclude module: "itext"
        exclude module: "mapbox-vector-tile"
        exclude module: "opencsv"
    }

    implementation "io.micronaut:micronaut-management"
    compileOnly "io.micronaut.configuration:micronaut-openapi"
    implementation "io.swagger.core.v3:swagger-annotations"

    implementation "io.micronaut.kubernetes:micronaut-kubernetes-discovery-client"

    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    compileOnly platform("io.micronaut:micronaut-bom:$micronautVersion")
    compileOnly "io.micronaut:micronaut-inject-groovy"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-runtime-groovy"
    implementation "io.micronaut:micronaut-validation"
    implementation "javax.annotation:javax.annotation-api"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    testCompileOnly platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "io.micronaut.test:micronaut-test-spock"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
}

test.classpath += configurations.developmentOnly

mainClassName = "lidar.converter.Application"
tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
    groovyOptions.forkOptions.jvmArgs.add('-Dmicronaut.openapi.views.spec=redoc.enabled=true,rapidoc.enabled=true,swagger-ui.enabled=true,swagger-ui.theme=flattop')
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
}

jib {
    from {
        image = "nexus-docker-public-hosted.ossim.io/lidar-converter-alpine:latest"
    }
    to {
        image = 'nexus-docker-public-hosted.ossim.io/lidar-converter-server'
        tags = ['latest']
    }
    extraDirectories {
        paths {
            path {
                from = file('src/main/jib')
                into = "/app"
            }
            path {
                from = file('src/main/jib')
                into = "/app"
            }
        }
        permissions = [
                "/app/run_java.sh": "755"
        ]
    }
    containerizingMode = 'packaged'
    container {
        environment = [
                JAVA_APP_DIR: '/app',
                JAVA_MAIN_CLASS: mainClassName,
                JAVA_CLASSPATH: '/app/classpath/*:/app/libs/*'
        ]
        ports = ['8080']
        creationTime = 'USE_CURRENT_TIMESTAMP'
        entrypoint = ['/app/run_java.sh']
    }
}
